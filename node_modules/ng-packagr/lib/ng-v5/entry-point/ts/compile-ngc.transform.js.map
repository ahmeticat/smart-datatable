{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/ts/compile-ngc.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,iCAAiC;AACjC,wDAA2E;AAC3E,4EAAuE;AACvE,gEAA4D;AAC5D,mDAAoE;AACpE,yCAAyC;AACzC,uCAAmF;AACnF,4EAAwE;AAE3D,QAAA,mBAAmB,GAAc,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IAC/E,GAAG,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAmB,CAAC;IAC1E,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,oBAAY,CAAqB,CAAC;IACnE,sCAAsC;IACtC,MAAM,QAAQ,GAAG,uCAA4B,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAErF,6BAA6B;IAC7B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACzE,MAAM,EAAE,qBAAqB,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;IACnD,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3E,MAAM,mBAAmB,GAAG,IAAI,0CAAmB,CAAC,QAAQ,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;IAEzF,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,8BAAa,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAEhH,MAAM,yCAAkB,CACtB,KAAK,EACL,QAAQ,EACR,qBAAqB,EACrB,mBAAmB,EACnB;QACE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QAC7B,WAAW,EAAE,IAAI;QACjB,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM;KAC/B,EACD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAC1B,aAAa,CACd,CAAC;IAEF,MAAM,yCAAkB,CAAC,KAAK,EAAE,QAAQ,EAAE,qBAAqB,EAAE,mBAAmB,EAAE;QACpF,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAC1B,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG;QAC3B,kBAAkB,EAAE,IAAI;QACxB,kDAAkD;QAClD,WAAW,EAAE,KAAK;QAClB,cAAc,EAAE,SAAS;QACzB,gBAAgB,EAAE,IAAI;QACtB,mBAAmB,EAAE,IAAI;QACzB,kBAAkB,EAAE,KAAK;KAC1B,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport * as ts from 'typescript';\nimport { Transform, transformFromPromise } from '../../../brocc/transform';\nimport { compileSourceFiles } from '../../../ngc/compile-source-files';\nimport { NgccProcessor } from '../../../ngc/ngcc-processor';\nimport { setDependenciesTsConfigPaths } from '../../../ts/tsconfig';\nimport * as log from '../../../util/log';\nimport { isEntryPointInProgress, EntryPointNode, isEntryPoint } from '../../nodes';\nimport { StylesheetProcessor } from '../resources/stylesheet-processor';\n\nexport const compileNgcTransform: Transform = transformFromPromise(async graph => {\n  log.info(`Compiling TypeScript sources through ngc`);\n  const entryPoint = graph.find(isEntryPointInProgress()) as EntryPointNode;\n  const entryPoints = graph.filter(isEntryPoint) as EntryPointNode[];\n  // Add paths mappings for dependencies\n  const tsConfig = setDependenciesTsConfigPaths(entryPoint.data.tsConfig, entryPoints);\n\n  // Compile TypeScript sources\n  const { esm2015, esm5, declarations } = entryPoint.data.destinationFiles;\n  const { moduleResolutionCache } = entryPoint.cache;\n  const { basePath, cssUrl, styleIncludePaths } = entryPoint.data.entryPoint;\n  const stylesheetProcessor = new StylesheetProcessor(basePath, cssUrl, styleIncludePaths);\n\n  const ngccProcessor = tsConfig.options.enableIvy ? new NgccProcessor(tsConfig.options, entryPoints) : undefined;\n\n  await compileSourceFiles(\n    graph,\n    tsConfig,\n    moduleResolutionCache,\n    stylesheetProcessor,\n    {\n      outDir: path.dirname(esm2015),\n      declaration: true,\n      target: ts.ScriptTarget.ES2015,\n    },\n    path.dirname(declarations),\n    ngccProcessor,\n  );\n\n  await compileSourceFiles(graph, tsConfig, moduleResolutionCache, stylesheetProcessor, {\n    outDir: path.dirname(esm5),\n    target: ts.ScriptTarget.ES5,\n    downlevelIteration: true,\n    // the options are here, to improve the build time\n    declaration: false,\n    declarationDir: undefined,\n    skipMetadataEmit: true,\n    skipTemplateCodegen: true,\n    strictMetadataEmit: false,\n  });\n\n  return graph;\n});\n"]}