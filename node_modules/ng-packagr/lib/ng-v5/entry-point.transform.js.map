{"version":3,"file":"entry-point.transform.js","sourceRoot":"","sources":["../../../src/lib/ng-v5/entry-point.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,+BAA4B;AAC5B,wCAA2C;AAC3C,4CAA+C;AAC/C,kDAAqE;AACrE,mCAAmC;AACnC,mCAAuC;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACU,QAAA,0BAA0B,GAAG,CACxC,SAAoB,EACpB,YAAuB,EACvB,YAAuB,EACZ,EAAE,CACb,WAAI;AACF,+DAA+D;AAE/D,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IACjC,4CAA4C;IAC5C,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAY,EAAE,CAAC,GAAG,CAAC,qBAAY,CAAC,CAAC,CAAC;IAChE,GAAG,CAAC,GAAG,CAAC,kFAAkF,CAAC,CAAC;IAC5F,GAAG,CAAC,GAAG,CAAC,yBAAyB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,CAAC,CAAC;IACzE,GAAG,CAAC,GAAG,CAAC,gFAAgF,CAAC,CAAC;AAC5F,CAAC,CAAA,CAAC;AACF,iCAAiC;AACjC,SAAS;AACT,+CAA+C;AAC/C,YAAY,EACZ,YAAY,EACZ,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IACjC,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAY,EAAE,CAAC,GAAG,CAAC,qBAAY,CAAC,CAAC,CAAC;IAChE,UAAU,CAAC,KAAK,GAAG,iBAAU,CAAC;AAChC,CAAC,CAAA,CAAC,CAGH,CAAC","sourcesContent":["import { pipe } from 'rxjs';\nimport { STATE_DONE } from '../brocc/node';\nimport { isInProgress } from '../brocc/select';\nimport { Transform, transformFromPromise } from '../brocc/transform';\nimport * as log from '../util/log';\nimport { byEntryPoint } from './nodes';\n\n/**\n * A re-write of the `transformSources()` script that transforms an entry point from sources to distributable format.\n *\n * Sources are TypeScript source files accompanied by HTML templates and xCSS stylesheets.\n * See the Angular Package Format for a detailed description of what the distributables include.\n *\n * The current transformation pipeline can be thought of as:\n *\n *  - clean\n *  - compileTs\n *  - downlevelTs\n *  - writeBundles\n *    - bundleToFesm15\n *    - bundleToFesm5\n *    - bundleToUmd\n *    - bundleToUmdMin\n *  - relocateSourceMaps\n *  - writePackage\n *   - copyStagedFiles (bundles, esm, dts, metadata, sourcemaps)\n *   - writePackageJson\n *\n * The transformation pipeline is pluggable through the dependency injection system.\n * Sub-transformations are passed to this factory function as arguments.\n *\n * @param compileTs Transformation compiling typescript sources to ES2015 modules.\n * @param writeBundles Transformation flattening ES2015 modules to ESM2015, ESM5, UMD, and minified UMD.\n * @param writePackage Transformation writing a distribution-ready `package.json` (for publishing to npm registry).\n */\nexport const entryPointTransformFactory = (\n  compileTs: Transform,\n  writeBundles: Transform,\n  writePackage: Transform,\n): Transform =>\n  pipe(\n    //tap(() => log.info(`Building from sources for entry point`)),\n\n    transformFromPromise(async graph => {\n      // Peek the first entry point from the graph\n      const entryPoint = graph.find(byEntryPoint().and(isInProgress));\n      log.msg('\\n------------------------------------------------------------------------------');\n      log.msg(`Building entry point '${entryPoint.data.entryPoint.moduleId}'`);\n      log.msg('------------------------------------------------------------------------------');\n    }),\n    // TypeScript sources compilation\n    compileTs,\n    // After TypeScript: bundling and write package\n    writeBundles,\n    writePackage,\n    transformFromPromise(async graph => {\n      const entryPoint = graph.find(byEntryPoint().and(isInProgress));\n      entryPoint.state = STATE_DONE;\n    }),\n\n    //tap(() => log.info(`Built.`))\n  );\n"]}