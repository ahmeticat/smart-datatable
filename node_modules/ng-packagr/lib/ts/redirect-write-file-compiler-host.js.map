{"version":3,"file":"redirect-write-file-compiler-host.js","sourceRoot":"","sources":["../../../src/lib/ts/redirect-write-file-compiler-host.ts"],"names":[],"mappings":";;AACA,6BAA6B;AAE7B;;;;;;GAMG;AACH,SAAgB,6BAA6B,CAC3C,YAA6B,EAC7B,OAAe,EACf,cAAsB;IAEtB,yBACK,YAAY,IACf,SAAS,EAAE,CACT,QAAgB,EAChB,IAAY,EACZ,kBAA2B,EAC3B,OAAmC,EACnC,WAA0C,EAC1C,EAAE;YACF,IAAI,QAAQ,GAAG,QAAQ,CAAC;YACxB,IAAI,6BAA6B,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAChD,MAAM,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAC7D,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC;aAC9D;YACD,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,kBAAkB,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QAC9F,CAAC,IACD;AACJ,CAAC;AAtBD,sEAsBC","sourcesContent":["import * as ts from 'typescript';\nimport * as path from 'path';\n\n/**\n * Returns a TypeScript compiler host that redirects `writeFile` output to the given `declarationDir`.\n *\n * @param compilerHost Original compiler host\n * @param baseDir Project base directory\n * @param declarationDir Declarations target directory\n */\nexport function redirectWriteFileCompilerHost(\n  compilerHost: ts.CompilerHost,\n  baseDir: string,\n  declarationDir: string,\n): ts.CompilerHost {\n  return {\n    ...compilerHost,\n    writeFile: (\n      fileName: string,\n      data: string,\n      writeByteOrderMark: boolean,\n      onError?: (message: string) => void,\n      sourceFiles?: ReadonlyArray<ts.SourceFile>,\n    ) => {\n      let filePath = fileName;\n      if (/(\\.d\\.ts|\\.metadata\\.json)$/.test(fileName)) {\n        const projectRelativePath = path.relative(baseDir, fileName);\n        filePath = path.resolve(declarationDir, projectRelativePath);\n      }\n      compilerHost.writeFile.call(this, filePath, data, writeByteOrderMark, onError, sourceFiles);\n    },\n  };\n}\n"]}